package paqueteinterfaz;

import java.sql.Connection;
import paqueteconexion.conexionDB;
import javax.swing.JTable;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import paqueteconexion.conexionDB;
import javax.swing.table.DefaultTableModel;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;





/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author carls
 */
public class NewJFrame extends javax.swing.JFrame {

    conexionDB conectar = new conexionDB();
    Connection conn;
    Statement st;
    ResultSet rs;
    DefaultTableModel modelo;
    private String seleccionado = "Oficina";
 

    public NewJFrame() {
        initComponents();
        jPanel3.setVisible(false);
         jPanel2.setVisible(false);
        jPanel5.setVisible(false);
        jPanel4.setVisible(false);
        jPanel6.setVisible(false);
        listar();
        jTableEmpleados.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        public void valueChanged(ListSelectionEvent event) {
            if (!event.getValueIsAdjusting()) {
                int selectedRow = jTableEmpleados.getSelectedRow();
                if (selectedRow != -1) {
                    DefaultTableModel model = (DefaultTableModel) jTableEmpleados.getModel();
                    String[] datos = new String[9];
                    for (int i = 0; i < 9; i++) {
                        datos[i] = model.getValueAt(selectedRow, i).toString();
                    }
                    llenarCampos(datos);
                }
            }
        }
    });
    
    jTableOficinas.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        public void valueChanged(ListSelectionEvent event) {
            if (!event.getValueIsAdjusting()) {
                int selectedRow = jTableOficinas.getSelectedRow();
                if (selectedRow != -1) {
                    DefaultTableModel model = (DefaultTableModel) jTableOficinas.getModel();
                    String[] datos = new String[8];
                    for (int i = 0; i < 8; i++) {
                        datos[i] = model.getValueAt(selectedRow, i).toString();
                    }
                    llenarCamposOficina(datos);
                }
            }
        }
    });



        
    }
    private void llenarCampos(String[] datos) {
    TextFieldID.setText(datos[0]);
    TextFieldNombre.setText(datos[1]);
    TextFieldApellido1.setText(datos[2]);
    TextFieldApellido2.setText(datos[3]);
    TextFieldExtension.setText(datos[4]);
    TextFieldEmail.setText(datos[5]);
    TextFieldCodigoOficina.setText(datos[6]);
    TextFieldCodigoJefe.setText(datos[7]);
    TextFieldPuesto.setText(datos[8]);
}
    private void llenarCamposOficina(String[] datos) {
    jTextFieldIDOficina.setText(datos[0]);
    TextFieldCiudad.setText(datos[1]);
    TextFieldPais.setText(datos[2]);
    TextFieldRegion.setText(datos[3]);
    TextFieldCodigoPostal.setText(datos[4]);
    TextFieldTelefono.setText(datos[5]);
    TextFieldLinea1.setText(datos[6]);
    TextFieldLinea2.setText(datos[7]);
}




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldIDOficina = new javax.swing.JTextField();
        TextFieldCiudad = new javax.swing.JTextField();
        TextFieldPais = new javax.swing.JTextField();
        TextFieldRegion = new javax.swing.JTextField();
        TextFieldCodigoPostal = new javax.swing.JTextField();
        TextFieldTelefono = new javax.swing.JTextField();
        TextFieldLinea1 = new javax.swing.JTextField();
        TextFieldLinea2 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        BotonNuevo = new javax.swing.JButton();
        BotonBuscar = new javax.swing.JButton();
        BotonBorrar = new javax.swing.JButton();
        BotonModificarDatos = new javax.swing.JButton();
        TextFieldBusqueda = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmpleados = new javax.swing.JTable();
        BotonOficina = new javax.swing.JButton();
        BotonEmpleado = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        Codigo_EmpleadoLabel = new javax.swing.JLabel();
        TextFieldID = new javax.swing.JTextField();
        NombreLabel = new javax.swing.JLabel();
        TextFieldNombre = new javax.swing.JTextField();
        Apellido1Label = new javax.swing.JLabel();
        TextFieldApellido1 = new javax.swing.JTextField();
        Apellido2Label = new javax.swing.JLabel();
        TextFieldApellido2 = new javax.swing.JTextField();
        ExtensionLabel = new javax.swing.JLabel();
        TextFieldExtension = new javax.swing.JTextField();
        TextFieldEmail = new javax.swing.JTextField();
        EmailLabel = new javax.swing.JLabel();
        CodigoOficinaLabel = new javax.swing.JLabel();
        TextFieldCodigoOficina = new javax.swing.JTextField();
        TextFieldCodigoJefe = new javax.swing.JTextField();
        CodigoJefeLabel = new javax.swing.JLabel();
        PuestoLabel = new javax.swing.JLabel();
        TextFieldPuesto = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableOficinas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImages(null);

        jLabel2.setText("ID");

        jLabel3.setText("Ciudad");

        jLabel4.setText("Pais");

        jLabel5.setText("Region");

        jLabel6.setText("Codigo_postal");

        jLabel7.setText("Telefono");

        jLabel8.setText("Linea direccion 1");

        jLabel9.setText("Linea direccion 2");

        TextFieldCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldCiudadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TextFieldPais, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldIDOficina, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TextFieldCodigoPostal, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldLinea1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldLinea2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 48, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(TextFieldTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(TextFieldLinea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(TextFieldLinea2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldIDOficina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addComponent(TextFieldCodigoPostal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(TextFieldPais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        BotonNuevo.setText("Nuevo");
        BotonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonNuevoActionPerformed(evt);
            }
        });

        BotonBuscar.setText("Buscar");
        BotonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBuscarActionPerformed(evt);
            }
        });

        BotonBorrar.setText("Borrar");
        BotonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBorrarActionPerformed(evt);
            }
        });

        BotonModificarDatos.setText("Modificar datos");
        BotonModificarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonModificarDatosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TextFieldBusqueda)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(BotonNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonBuscar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(BotonBorrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BotonModificarDatos)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonNuevo)
                    .addComponent(BotonBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonBorrar)
                    .addComponent(BotonModificarDatos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(TextFieldBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel1.setText("     Gestion de empleados y oficinas");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTableEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "codigo_empleado", "nombre", "apellido1", "apellido2", "extension", "email", "codigo_oficina", "codigo_jefe", "puesto"
            }
        ));
        jScrollPane1.setViewportView(jTableEmpleados);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 945, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        BotonOficina.setText("Oficina");
        BotonOficina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonOficinaActionPerformed(evt);
            }
        });

        BotonEmpleado.setText("Empleado");
        BotonEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEmpleadoActionPerformed(evt);
            }
        });

        Codigo_EmpleadoLabel.setText("ID");

        TextFieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldIDActionPerformed(evt);
            }
        });

        NombreLabel.setText("Nombre");

        Apellido1Label.setText("Apellido 1");

        Apellido2Label.setText("Apellido2");

        ExtensionLabel.setText("Extension");

        EmailLabel.setText("Email");

        CodigoOficinaLabel.setText("Codigo Oficina");

        CodigoJefeLabel.setText("Codigo Jefe");

        PuestoLabel.setText("Puesto");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(Codigo_EmpleadoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(NombreLabel)
                        .addGap(17, 17, 17))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(Apellido1Label)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addComponent(Apellido2Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TextFieldApellido1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldApellido2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PuestoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ExtensionLabel)
                            .addComponent(CodigoJefeLabel))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldCodigoJefe, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(CodigoOficinaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldCodigoOficina, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ExtensionLabel)
                            .addComponent(TextFieldExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmailLabel)
                            .addComponent(TextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldCodigoOficina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CodigoOficinaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CodigoJefeLabel)
                            .addComponent(TextFieldCodigoJefe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PuestoLabel)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Codigo_EmpleadoLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NombreLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldApellido1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Apellido1Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldApellido2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Apellido2Label))))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jTableOficinas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "codigo_oficina", "ciudad", "pais", "region", "codigo_postal", "telefono", "linea_direccion1", "linea_direccion2"
            }
        ));
        jScrollPane2.setViewportView(jTableOficinas);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
                .addGap(78, 78, 78))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(BotonOficina, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonEmpleado)
                        .addGap(168, 168, 168)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(316, 316, 316))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(230, 230, 230))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(98, 98, 98))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BotonOficina, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(449, 449, 449))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(195, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private int ultimoCodigoEmpleado = 0;

    private void BotonEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEmpleadoActionPerformed
        seleccionado = "Empleado";
    jPanel3.setVisible(true);
    jPanel4.setVisible(true);
    jPanel5.setVisible(true);
    jPanel2.setVisible(false);
    jPanel6.setVisible(false);
    listar(); // Mover la llamada a listar() aquí
    }//GEN-LAST:event_BotonEmpleadoActionPerformed

    private void BotonOficinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonOficinaActionPerformed
        seleccionado = "Oficina";
        jPanel3.setVisible(true);
        jPanel6.setVisible(true);
        jPanel2.setVisible(true);
        jPanel5.setVisible(false);
        jPanel4.setVisible(false);
        listar();
       
        
// TODO add your handling code here:
    }//GEN-LAST:event_BotonOficinaActionPerformed

    private void BotonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonNuevoActionPerformed
if (seleccionado.equals("Empleado")) {
        crearNuevoEmpleado();
    } else if (seleccionado.equals("Oficina")) {
        crearNuevaOficina();
    }




        // TODO add your handling code here:
    }//GEN-LAST:event_BotonNuevoActionPerformed
private void crearNuevoEmpleado() {
    try {
        conn = conectar.getConnection();
        st = conn.createStatement();

        // Verificar si hay campos vacíos
        if (TextFieldNombre.getText().isEmpty() || TextFieldApellido1.getText().isEmpty() || TextFieldApellido2.getText().isEmpty()
                || TextFieldExtension.getText().isEmpty() || TextFieldEmail.getText().isEmpty() || TextFieldCodigoOficina.getText().isEmpty()
                || TextFieldPuesto.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método sin realizar la inserción
        }

        String getMaxCodigoEmpleadoQuery = "SELECT MAX(codigo_empleado) FROM empleado";
        ResultSet rsMaxCodigoEmpleado = st.executeQuery(getMaxCodigoEmpleadoQuery);
        if (rsMaxCodigoEmpleado.next()) {
            ultimoCodigoEmpleado = rsMaxCodigoEmpleado.getInt(1) + 1;
        }

        String sql = "INSERT INTO empleado (codigo_empleado, nombre, apellido1, apellido2, extension, email, codigo_oficina, codigo_jefe, puesto) VALUES (?,?,?,?,?,?,?,?,?)";
        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setInt(1, ultimoCodigoEmpleado);
        pst.setString(2, TextFieldNombre.getText());
        pst.setString(3, TextFieldApellido1.getText());
        pst.setString(4, TextFieldApellido2.getText());
        pst.setString(5, TextFieldExtension.getText());
        pst.setString(6, TextFieldEmail.getText());
        pst.setString(7, TextFieldCodigoOficina.getText());

        String codigoJefeText = TextFieldCodigoJefe.getText();
        int codigoJefe = 0;
        if (!codigoJefeText.isEmpty()) {
            codigoJefe = Integer.parseInt(codigoJefeText);
        }
        pst.setInt(8, codigoJefe);

        pst.setString(9, TextFieldPuesto.getText());

        pst.executeUpdate();

        System.out.println("Empleado añadido exitosamente.");
        listar();  // Actualiza la tabla para mostrar el nuevo empleado
        limpiarCampos(); // Limpia los campos de texto

    } catch (Exception e) {
        System.out.println("Error al añadir empleado: " + e.getMessage());
    }
}
private void crearNuevaOficina() {
    try {
        conn = conectar.getConnection();
        st = conn.createStatement();

        // Verificar si hay campos vacíos
        if (TextFieldCiudad.getText().isEmpty() || TextFieldPais.getText().isEmpty()
                || TextFieldRegion.getText().isEmpty() || TextFieldCodigoPostal.getText().isEmpty()
                || TextFieldTelefono.getText().isEmpty() || TextFieldLinea1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método sin realizar la inserción
        }

        String codigoOficinaText = jTextFieldIDOficina.getText();
        if (codigoOficinaText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El código de oficina es obligatorio.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si no se proporciona el código de oficina
        }

        // Verificar si la oficina ya existe en la base de datos
        String checkOficinaQuery = "SELECT * FROM oficina WHERE codigo_oficina = '" + codigoOficinaText + "'";
        ResultSet rsOficina = st.executeQuery(checkOficinaQuery);
        if (rsOficina.next()) {
            JOptionPane.showMessageDialog(this, "El código de oficina ya está en uso.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si el código de oficina ya está en uso
        }

        String sql = "INSERT INTO oficina (codigo_oficina, ciudad, pais, region, codigo_postal, telefono, linea_direccion1, linea_direccion2) VALUES (?,?,?,?,?,?,?,?)";
        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setString(1, codigoOficinaText);
        pst.setString(2, TextFieldCiudad.getText());
        pst.setString(3, TextFieldPais.getText());
        pst.setString(4, TextFieldRegion.getText());
        pst.setString(5, TextFieldCodigoPostal.getText());
        pst.setString(6, TextFieldTelefono.getText());
        pst.setString(7, TextFieldLinea1.getText());
        pst.setString(8, TextFieldLinea2.getText());

        pst.executeUpdate();

        System.out.println("Oficina añadida exitosamente.");
        listar();  // Actualiza la tabla para mostrar la nueva oficina
        limpiarCamposOficina(); // Limpia los campos de texto

    } catch (Exception e) {
        System.out.println("Error al añadir oficina: " + e.getMessage());
    }
}
    
    private void borrarEmpleado() {
    int filaSeleccionada = jTableEmpleados.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione un empleado para borrar.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea borrar este empleado?", "Confirmar borrado", JOptionPane.YES_NO_OPTION);
    if (confirmacion == JOptionPane.YES_OPTION) {
        try {
            conn = conectar.getConnection();
            st = conn.createStatement();

            int codigoEmpleado = Integer.parseInt(TextFieldID.getText());

            // Primero, actualizar los empleados que tienen a este empleado como jefe
            String sqlUpdate = "UPDATE empleado SET codigo_jefe = NULL WHERE codigo_jefe = ?";
            PreparedStatement pstmtUpdate = conn.prepareStatement(sqlUpdate);
            pstmtUpdate.setInt(1, codigoEmpleado);
            pstmtUpdate.executeUpdate();

            // Luego, eliminar el empleado
            String sqlDelete = "DELETE FROM empleado WHERE codigo_empleado = ?";
            PreparedStatement pstmtDelete = conn.prepareStatement(sqlDelete);
            pstmtDelete.setInt(1, codigoEmpleado);
            pstmtDelete.executeUpdate();

            JOptionPane.showMessageDialog(this, "Empleado borrado exitosamente.");
            limpiarCampos();
            listar(); // Actualizar la tabla
        } catch (Exception e) {
            System.out.println("Error al borrar empleado: " + e.getMessage());
        }
    }
}


private void borrarOficina() {
    int filaSeleccionada = jTableOficinas.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione una oficina para borrar.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea borrar esta oficina?", "Confirmar borrado", JOptionPane.YES_NO_OPTION);
    if (confirmacion == JOptionPane.YES_OPTION) {
        try {
            conn = conectar.getConnection();
            st = conn.createStatement();

            // Obtener el codigoOficina de la fila seleccionada en la tabla
            String codigoOficina = jTableOficinas.getValueAt(filaSeleccionada, 0).toString();

            // Primero, actualizar los empleados que están asociados con la oficina que se va a eliminar
            String sqlUpdate = "UPDATE empleado SET codigo_oficina = NULL WHERE codigo_oficina = ?";
            PreparedStatement pstmtUpdate = conn.prepareStatement(sqlUpdate);
            pstmtUpdate.setString(1, codigoOficina);
            pstmtUpdate.executeUpdate();

            // Luego, eliminar la oficina
            String sqlDelete = "DELETE FROM oficina WHERE codigo_oficina = ?";
            PreparedStatement pstmtDelete = conn.prepareStatement(sqlDelete);
            pstmtDelete.setString(1, codigoOficina);
            pstmtDelete.executeUpdate();

            JOptionPane.showMessageDialog(this, "Oficina borrada exitosamente.");
            limpiarCampos();
            listar(); // Actualizar la tabla
        } catch (Exception e) {
            System.out.println("Error al borrar oficina: " + e.getMessage());
        }
    }
}


private void guardarEmpleado() {
    try {
        conn = conectar.getConnection();
        st = conn.createStatement();

        // Verificar si hay campos vacíos
        if (TextFieldNombre.getText().isEmpty() || TextFieldApellido1.getText().isEmpty() || TextFieldApellido2.getText().isEmpty()
                || TextFieldExtension.getText().isEmpty() || TextFieldEmail.getText().isEmpty() || TextFieldCodigoOficina.getText().isEmpty()
                || TextFieldPuesto.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método sin realizar la inserción o actualización
        }

        String codigoEmpleadoText = TextFieldID.getText();
        int codigoEmpleado = 0;
        if (!codigoEmpleadoText.isEmpty()) {
            codigoEmpleado = Integer.parseInt(codigoEmpleadoText);
        }

        String sql;
        if (codigoEmpleado == 0) {
            // Inserción de nuevo empleado
            String getMaxCodigoEmpleadoQuery = "SELECT MAX(codigo_empleado) FROM empleado";
            ResultSet rsMaxCodigoEmpleado = st.executeQuery(getMaxCodigoEmpleadoQuery);
            if (rsMaxCodigoEmpleado.next()) {
                ultimoCodigoEmpleado = rsMaxCodigoEmpleado.getInt(1) + 1;
            }

            sql = "INSERT INTO empleado (codigo_empleado, nombre, apellido1, apellido2, extension, email, codigo_oficina, codigo_jefe, puesto) VALUES (?,?,?,?,?,?,?,?,?)";
        } else {
            // Actualización de empleado existente
            sql = "UPDATE empleado SET nombre=?, apellido1=?, apellido2=?, extension=?, email=?, codigo_oficina=?, codigo_jefe=?, puesto=? WHERE codigo_empleado=?";
        }

        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setInt(1, ultimoCodigoEmpleado);
        pst.setString(2, TextFieldNombre.getText());
        pst.setString(3, TextFieldApellido1.getText());
        pst.setString(4, TextFieldApellido2.getText());
        pst.setString(5, TextFieldExtension.getText());
        pst.setString(6, TextFieldEmail.getText());
        pst.setString(7, TextFieldCodigoOficina.getText());

        String codigoJefeText = TextFieldCodigoJefe.getText();
        int codigoJefe = 0;
        if (!codigoJefeText.isEmpty()) {
            codigoJefe = Integer.parseInt(codigoJefeText);
        }
        pst.setInt(8, codigoJefe);

        pst.setString(9, TextFieldPuesto.getText());
        
        if (codigoEmpleado != 0) {
            pst.setInt(10, codigoEmpleado);
        }

        pst.executeUpdate();

        System.out.println("Empleado guardado exitosamente.");
        listar();  // Actualiza la tabla para mostrar el nuevo empleado o los cambios realizados
    } catch (Exception e) {
        System.out.println("Error al guardar empleado: " + e.getMessage());
    }
}
private void guardarOficina() {
    try {
        conn = conectar.getConnection();
        st = conn.createStatement();

        // Verificar si hay campos vacíos
        if (TextFieldCiudad.getText().isEmpty() || TextFieldPais.getText().isEmpty()
                || TextFieldRegion.getText().isEmpty() || TextFieldCodigoPostal.getText().isEmpty()
                || TextFieldTelefono.getText().isEmpty() || TextFieldLinea1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método sin realizar la inserción o actualización
        }

        String codigoOficinaText = TextFieldCodigoOficina.getText();
        String sql;
        if (codigoOficinaText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El código de oficina es obligatorio.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si no se proporciona el código de oficina
        } else {
            // Verificar si la oficina ya existe en la base de datos
            String checkOficinaQuery = "SELECT * FROM oficina WHERE codigo_oficina = '" + codigoOficinaText + "'";
            ResultSet rsOficina = st.executeQuery(checkOficinaQuery);
            boolean oficinaExistente = rsOficina.next();

            if (oficinaExistente) {
                // Actualización de oficina existente
                sql = "UPDATE oficina SET ciudad=?, pais=?, region=?, codigo_postal=?, telefono=?, linea_direccion1=?, linea_direccion2=? WHERE codigo_oficina=?";
            } else {
                // Inserción de nueva oficina
                sql = "INSERT INTO oficina (codigo_oficina, ciudad, pais, region, codigo_postal, telefono, linea_direccion1, linea_direccion2) VALUES (?,?,?,?,?,?,?,?)";
            }
        }

        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setString(1, TextFieldCiudad.getText());
        pst.setString(2, TextFieldPais.getText());
        pst.setString(3, TextFieldRegion.getText());
        pst.setString(4, TextFieldCodigoPostal.getText());
        pst.setString(5, TextFieldTelefono.getText());
        pst.setString(6, TextFieldLinea1.getText());
        pst.setString(7, TextFieldLinea2.getText());
        pst.setString(8, codigoOficinaText);

        pst.executeUpdate();

        System.out.println("Oficina guardada exitosamente.");
        listar(); // Actualiza la tabla para mostrar la nueva oficina o los cambios realizados
    } catch (Exception e) {
        System.out.println("Error al guardar oficina: " + e.getMessage());
    }
}


private void limpiarCampos() {
    TextFieldID.setText("");
    TextFieldNombre.setText("");
    TextFieldApellido1.setText("");
    TextFieldApellido2.setText("");
    TextFieldExtension.setText("");
    TextFieldEmail.setText("");
    TextFieldCodigoOficina.setText("");
    TextFieldCodigoJefe.setText("");
    TextFieldPuesto.setText("");
}

private void limpiarCamposOficina() {
    TextFieldCodigoOficina.setText("");
    TextFieldCiudad.setText("");
    TextFieldPais.setText("");
    TextFieldRegion.setText("");
    TextFieldCodigoPostal.setText("");
    TextFieldTelefono.setText("");
    TextFieldLinea1.setText("");
    TextFieldLinea2.setText("");
}


    private void TextFieldIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldIDActionPerformed

    private void TextFieldCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldCiudadActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_TextFieldCiudadActionPerformed

    private void BotonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBorrarActionPerformed
if (seleccionado.equals("Empleado")) {
        borrarEmpleado();
    } else if (seleccionado.equals("Oficina")) {
        borrarOficina();
    }        // TODO add your handling code here:
    }//GEN-LAST:event_BotonBorrarActionPerformed

    private void BotonModificarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonModificarDatosActionPerformed
if (seleccionado.equals("Empleado")) {
        modificarEmpleado();
    } else if (seleccionado.equals("Oficina")) {
        modificarOficina();
    }        // TODO add your handling code here:
    }//GEN-LAST:event_BotonModificarDatosActionPerformed

    private void BotonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBuscarActionPerformed
String consulta = TextFieldBusqueda.getText();
        buscar(consulta);        // TODO add your handling code here:
    }//GEN-LAST:event_BotonBuscarActionPerformed

    private void modificarEmpleado() {
    try {
        conn = conectar.getConnection();
        st = conn.createStatement();

        // Obtener el código del empleado seleccionado
        int selectedRow = jTableEmpleados.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un empleado de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si no se seleccionó un empleado
        }
        int codigoEmpleado = (int) jTableEmpleados.getValueAt(selectedRow, 0);

        // Verificar si hay campos vacíos
        if (TextFieldNombre.getText().isEmpty() || TextFieldApellido1.getText().isEmpty()
                || TextFieldApellido2.getText().isEmpty() || TextFieldExtension.getText().isEmpty()
                || TextFieldEmail.getText().isEmpty() || TextFieldCodigoOficina.getText().isEmpty()
                || TextFieldPuesto.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método sin realizar la actualización
        }

        String sql = "UPDATE empleado SET nombre=?, apellido1=?, apellido2=?, extension=?, email=?, codigo_oficina=?, codigo_jefe=?, puesto=? WHERE codigo_empleado=?";
        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setString(1, TextFieldNombre.getText());
        pst.setString(2, TextFieldApellido1.getText());
        pst.setString(3, TextFieldApellido2.getText());
        pst.setString(4, TextFieldExtension.getText());
        pst.setString(5, TextFieldEmail.getText());
        pst.setString(6, TextFieldCodigoOficina.getText());

        String codigoJefeText = TextFieldCodigoJefe.getText();
        int codigoJefe = 0;
        if (!codigoJefeText.isEmpty()) {
            codigoJefe = Integer.parseInt(codigoJefeText);
        }
        pst.setInt(7, codigoJefe);

        pst.setString(8, TextFieldPuesto.getText());
        pst.setInt(9, codigoEmpleado);

        pst.executeUpdate();

        System.out.println("Empleado modificado exitosamente.");
        listar(); // Actualiza la tabla para mostrar los cambios realizados
        limpiarCampos();
    } catch (Exception e) {
        System.out.println("Error al modificar empleado: " + e.getMessage());
    }
}
    private void modificarOficina() {
    try {
        conn = conectar.getConnection();
        st = conn.createStatement();

        // Obtener el código de la oficina seleccionada
        int selectedRow = jTableOficinas.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una oficina de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si no se seleccionó una oficina
        }
        String codigoOficina = (String) jTableOficinas.getValueAt(selectedRow, 0);

        // Verificar si hay campos vacíos
        if (TextFieldCiudad.getText().isEmpty() || TextFieldPais.getText().isEmpty()
                || TextFieldRegion.getText().isEmpty() || TextFieldCodigoPostal.getText().isEmpty()
                || TextFieldTelefono.getText().isEmpty() || TextFieldLinea1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método sin realizar la actualización
        }

        String sql = "UPDATE oficina SET ciudad=?, pais=?, region=?, codigo_postal=?, telefono=?, linea_direccion1=?, linea_direccion2=? WHERE codigo_oficina=?";
        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setString(1, TextFieldCiudad.getText());
        pst.setString(2, TextFieldPais.getText());
        pst.setString(3, TextFieldRegion.getText());
        pst.setString(4, TextFieldCodigoPostal.getText());
        pst.setString(5, TextFieldTelefono.getText());
        pst.setString(6, TextFieldLinea1.getText());
        pst.setString(7, TextFieldLinea2.getText());
        pst.setString(8, codigoOficina);

        pst.executeUpdate();

        System.out.println("Oficina modificada exitosamente.");
        listar(); // Actualiza la tabla de oficinas para mostrar los cambios realizados
        limpiarCamposOficina();
    } catch (Exception e) {
        System.out.println("Error al modificar oficina: " + e.getMessage());
    }
}
    void buscar(String consulta) {
    try {
        conn = conectar.getConnection();
        st = conn.createStatement();

        String sql;
        DefaultTableModel modelo = new DefaultTableModel();
        if (seleccionado.equals("Empleado")) {
            sql = "SELECT * FROM empleado WHERE codigo_empleado LIKE '%" + consulta + "%' OR nombre LIKE '%" + consulta + "%' OR apellido1 LIKE '%" + consulta + "%' OR apellido2 LIKE '%" + consulta + "%' OR extension LIKE '%" + consulta + "%' OR email LIKE '%" + consulta + "%' OR codigo_oficina LIKE '%" + consulta + "%' OR codigo_jefe LIKE '%" + consulta + "%' OR puesto LIKE '%" + consulta + "%'";
            modelo.addColumn("codigo_empleado");
            modelo.addColumn("nombre");
            modelo.addColumn("apellido1");
            modelo.addColumn("apellido2");
            modelo.addColumn("extensión");
            modelo.addColumn("email");
            modelo.addColumn("codigo_oficina");
            modelo.addColumn("codigo_jefe");
            modelo.addColumn("puesto");
        } else {
            sql = "SELECT * FROM oficina WHERE codigo_oficina LIKE '%" + consulta + "%' OR ciudad LIKE '%" + consulta + "%' OR pais LIKE '%" + consulta + "%' OR region LIKE '%" + consulta + "%' OR codigo_postal LIKE '%" + consulta + "%' OR telefono LIKE '%" + consulta + "%' OR linea_direccion1 LIKE '%" + consulta + "%' OR linea_direccion2 LIKE '%" + consulta + "%'";
            modelo.addColumn("codigo_oficina");
            modelo.addColumn("ciudad");
            modelo.addColumn("pais");
            modelo.addColumn("region");
            modelo.addColumn("codigo_postal");
            modelo.addColumn("telefono");
            modelo.addColumn("linea_direccion1");
            modelo.addColumn("linea_direccion2");
        }

        rs = st.executeQuery(sql);

        while (rs.next()) {
            Object[] fila = new Object[modelo.getColumnCount()];
            for (int i = 0; i < fila.length; i++) {
                fila[i] = rs.getObject(i + 1);
            }
            modelo.addRow(fila);
        }

        if (seleccionado.equals("Empleado")) {
            jTableEmpleados.setModel(modelo);
        } else {
            jTableOficinas.setModel(modelo);
        }

    } catch (Exception e) {
        System.out.println("Error al buscar: " + e.getMessage());
    }
}



 void listar() {
    if (seleccionado.equals("Empleado")) {
        String sql = "SELECT * FROM empleado";
        try {
            conn = conectar.getConnection();
            st = conn.createStatement();
            rs = st.executeQuery(sql);

            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("codigo_empleado");
            modelo.addColumn("nombre");
            modelo.addColumn("apellido1");
            modelo.addColumn("apellido2");
            modelo.addColumn("extensión");
            modelo.addColumn("email");
            modelo.addColumn("codigo_oficina");
            modelo.addColumn("codigo_jefe");
            modelo.addColumn("puesto");

            while (rs.next()) {
                Object[] empleado = new Object[9];
                empleado[0] = rs.getInt("codigo_empleado");
                empleado[1] = rs.getString("nombre");
                empleado[2] = rs.getString("apellido1");
                empleado[3] = rs.getString("apellido2");
                empleado[4] = rs.getString("extension");
                empleado[5] = rs.getString("email");
                empleado[6] = rs.getString("codigo_oficina");
                empleado[7] = rs.getInt("codigo_jefe");
                empleado[8] = rs.getString("puesto");

                modelo.addRow(empleado);
            }

            jTableEmpleados.setModel(modelo);
            jTableEmpleados.setVisible(true); // Mostrar la tabla de empleados
            jTableOficinas.setVisible(false); // Ocultar la tabla de oficinas
        } catch (Exception e) {
            System.out.println("Error, sin conexión a la base de datos: " + e.getMessage());
        }
    } else if (seleccionado.equals("Oficina")) {
        String sql = "SELECT * FROM oficina";
        try {
            conn = conectar.getConnection();
            st = conn.createStatement();
            rs = st.executeQuery(sql);

            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("codigo_oficina");
            modelo.addColumn("ciudad");
            modelo.addColumn("pais");
            modelo.addColumn("region");
            modelo.addColumn("codigo_postal");
            modelo.addColumn("telefono");
            modelo.addColumn("linea_direccion1");
            modelo.addColumn("linea_direccion2");

            while (rs.next()) {
                Object[] oficina = new Object[8];
                oficina[0] = rs.getString("codigo_oficina");
                oficina[1] = rs.getString("ciudad");
                oficina[2] = rs.getString("pais");
                oficina[3] = rs.getString("region");
                oficina[4] = rs.getString("codigo_postal");
                oficina[5] = rs.getString("telefono");
                oficina[6] = rs.getString("linea_direccion1");
                oficina[7] = rs.getString("linea_direccion2");

                modelo.addRow(oficina);
            }

            jTableEmpleados.setVisible(false); // Ocultar la tabla de empleados
            jTableOficinas.setModel(modelo);
            jTableOficinas.setVisible(true); // Mostrar la tabla de oficinas
        } catch (Exception e) {
            System.out.println("Error, sin conexión a la base de datos: " + e.getMessage());
        }
    } else {
        jTableEmpleados.setVisible(false); // Ocultar la tabla de empleados
        jTableOficinas.setVisible(false); // Ocultar la tabla de oficinas
    }
}

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Apellido1Label;
    private javax.swing.JLabel Apellido2Label;
    private javax.swing.JButton BotonBorrar;
    private javax.swing.JButton BotonBuscar;
    private javax.swing.JButton BotonEmpleado;
    private javax.swing.JButton BotonModificarDatos;
    private javax.swing.JButton BotonNuevo;
    private javax.swing.JButton BotonOficina;
    private javax.swing.JLabel CodigoJefeLabel;
    private javax.swing.JLabel CodigoOficinaLabel;
    private javax.swing.JLabel Codigo_EmpleadoLabel;
    private javax.swing.JLabel EmailLabel;
    private javax.swing.JLabel ExtensionLabel;
    private javax.swing.JLabel NombreLabel;
    private javax.swing.JLabel PuestoLabel;
    private javax.swing.JTextField TextFieldApellido1;
    private javax.swing.JTextField TextFieldApellido2;
    private javax.swing.JTextField TextFieldBusqueda;
    private javax.swing.JTextField TextFieldCiudad;
    private javax.swing.JTextField TextFieldCodigoJefe;
    private javax.swing.JTextField TextFieldCodigoOficina;
    private javax.swing.JTextField TextFieldCodigoPostal;
    private javax.swing.JTextField TextFieldEmail;
    private javax.swing.JTextField TextFieldExtension;
    private javax.swing.JTextField TextFieldID;
    private javax.swing.JTextField TextFieldLinea1;
    private javax.swing.JTextField TextFieldLinea2;
    private javax.swing.JTextField TextFieldNombre;
    private javax.swing.JTextField TextFieldPais;
    private javax.swing.JTextField TextFieldPuesto;
    private javax.swing.JTextField TextFieldRegion;
    private javax.swing.JTextField TextFieldTelefono;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableEmpleados;
    private javax.swing.JTable jTableOficinas;
    private javax.swing.JTextField jTextFieldIDOficina;
    // End of variables declaration//GEN-END:variables
}
